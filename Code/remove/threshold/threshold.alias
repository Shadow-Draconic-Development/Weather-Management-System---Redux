multiline
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def main(input_list: list[str]) -> tuple(str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of inputs

    Return:
        str: Embed string
        str: SVAR string
    """

    # Prefix and footer setup
    prefix = ctx.prefix
    footer = f"{prefix}weather remove threshold [location name] [season name] [wind/water] [threshold #]\n6/19/24 | ShadowsStride"

    # If less than four inputs
    if len(input_list) < 4:
        return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'Expected location name, season name, wind/water, and threshold' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # Check for threshold number
    try:
        int(input_list[3])

    except:
        return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'Condition threshold must be a number' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # If SVAR exists, load dictionary
    if (svar_dict := get_svar("weather_settings")):
        svar_dict = load_json(svar_dict) 

    # If SVAR does not exist
    else:
        return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'Weather settings does not exist' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # Gather location names
    location_names = list(svar_dict.keys())
    location_names.remove("Settings")

    # If at least one location is found
    if (search_result := search_list(input_list[0], location_names)):

        # If only one match
        if len(search_result) == 1:
            input_list[0] = search_result[0]

        # If more than one match
        else:

            # Set default behavior
            found = False

            # For each match
            for match in search_result:

                # If exact match
                if match.lower() == input_list[0].lower():
                    input_list[0] = match
                    found = True
                    break
            
            # If match not found
            if not found:
                output = "**Multiple Locations Found:**\n" + "\n".join(search_result)

                return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f '{output}' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""
    
    # If no locations are found
    else:
       return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'That location does not exist' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # Gather season names
    season_names = list(svar_dict[input_list[0]].keys())
    if "priority" in season_names:
        season_names.remove("priority")

    # If at least one season is found
    if (search_result := search_list(input_list[1], season_names)):

        # If exactly one match
        if len(search_result) == 1:
            input_list[1] = search_result[0]

        # If more than one match
        else:

            # Set default behavior
            found = False

            # For each match
            for match in search_result:

                # If an exact match
                if match.lower() == input_list[1].lower():
                    input_list[1] = match
                    found = True
                    break
            
            # If no exact matches found
            if not found:
                output = "**Multiple Seasons Found:**\n" + "\n".join(search_result)

                return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f '{output}' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # If no season is found
    else:
       return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'That season does not exist' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # If at least one condition type is found
    if (search_result := search_list(input_list[2], ["wind", "water"])):

        # If exactly one match
        if len(search_result) == 1:
            input_list[2] = f"{search_result[0]}_conditions"

        # If more than one match
        else:
            output = "**Multiple Condition Types Found:**\n" + "\n".join(search_result)

            return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f '{output}' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # If no valid condition type if found
    else:
       return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'That condition type does not exist' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""   

    # If threshold in keys
    if input_list[3] in svar_dict[input_list[0]][input_list[1]][input_list[2]].keys():
        condition_name = svar_dict[input_list[0]][input_list[1]][input_list[2]].pop(input_list[3])

    # If threshold not in keys
    else:
        return f"{prefix}embed -title 'You Have Been Sneak Attacked By an Error' -f 'That threshold does not exist' -color '#CF142B' -footer '{footer}' -thumb 'https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/error.png'", ""

    # Random thumbnail
    thumb = randchoice(
        ["https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-System---Redux/main/Data/images/fall.png",
        "https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-system---Redux/main/Data/images/spring.png",
        "https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-system---Redux/main/Data/images/summer.png",
        "https://raw.githubusercontent.com/Shadow-Draconic-Development/Weather-Management-system---Redux/main/Data/images/winter.png"]
    )

    return f"{prefix}embed -title 'You Have Successfully Removed {condition_name}' -color '#39FF14' -footer '{footer}' -thumb '{thumb}'", f"{prefix}svar weather_settings {dump_json(svar_dict)}"


# Main program function
embed_str, svar_str = main(&ARGS&)


</drac2>
{{embed_str}}
{{svar_str}}