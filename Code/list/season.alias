embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def multiple_match_determine(search_result: list[str], input_value: str):

    for match in search_result:
        if match.lower() == input_value.lower():
            return match

    return False


def main(input_list: list[str]):


    prefix = ctx.prefix
    footer = f"{prefix}weather list season [location name] <season name> | 7/6/24 | ShadowsStride"
    error_str = ""


    if not (svar_dict := get_svar("weather_settings")):
        return "Weather Seasons", "There currently are none", "", footer

    else:
        svar_dict = load_json(svar_dict)

    if len(svar_dict.keys()) == 1:
        return "Weather Seasons", "There currently are none", "", footer

    if len(input_list) == 0:
        return "You Have Been Sneak Attacked by an Error", "Expected the name of a location", "#CF142B", footer

    location_names = list(svar_dict.keys())
    location_names.remove("Settings")


    if (search_result := search_list(input_list[0], location_names)):

        if len(location_names) == 1:
            input_list[0] = search_result[0]
        
        else:
            if (location := multiple_match_determine(search_result, input_list[0])):
                input_list[0] = location

            else:
                return "You Have Been Sneak Attacked by an Error", "\n".join(["**Multiple Locations Found:**"] + search_result), "#CF142B", footer

    else:
        return "You Have Been Sneak Attacked by an Error", "\n".join(["Location not found\n"] + location_names), "#CF142B", footer

    seasons = list(svar_dict[input_list[0]].keys())
    seasons.remove("priority")

    if len(input_list) == 1:
        return  f"Weather Seasons for {input_list[0]}", "\n".join(seasons), "", footer

    
    if (search_result := search_list(input_list[0], seasons)):

        if len(search_result) == 1:
            input_list[1] = search_result[0]

        else:
            if (season := multiple_match_determine(search_result, input_list[1])):
                input_list[1] = season

            else:
                return  f"Weather Seasons for {input_list[0]}", "\n".join(["**Multiple Seasons Found:**"] + search_result), "#CF142B", footer

    else:
        return  f"Weather Seasons for {input_list[0]}", "\n".join(["Season not found\n"] + seasons), "#CF142B", footer

    water_condition_list = [f"{key}: {value}" for key, value in svar_dict[input_list[0]][input_list[1]]["water_conditions"].items()]

    wind_condition_list = [f"{key}: {value}" for key, value in svar_dict[input_list[0]][input_list[1]]["wind_conditions"].items()]

    output_list = [
        f"Temperature Dice: {svar_dict[input_list[0]][input_list[1]]["temp_dice"]}",
        f"Temperature Base: {svar_dict[input_list[0]][input_list[1]]["temp_base"]}",
        "",
        f"Water Dice: {svar_dict[input_list[0]][input_list[1]]["water_dice"]}",
        "Water Conditions:",
        "   " + "\n    ".join(water_condition_list),
        "",
        f"Wind Dice: {svar_dict[input_list[0]][input_list[1]]["wind_dice"]}",
        "Wind Conditions:",
        "   " + "\n    ".join(wind_condition_list),
    ]

    return f"Weather Season {input_list[0]} -> {input_list[1]}", "\n".join(output_list), "", footer


title, f, color, footer = main(&ARGS&)


</drac2>
-title "{{title}}"
-f "{{f}}"
-color "{{color}}"
-footer "{{footer}}"